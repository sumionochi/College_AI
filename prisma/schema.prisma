// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Issue {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  // desiredAmt       String
  // annualAmt        String
  // fullName         String
  // businessType     String
  // phoneNo          String
  // tele             Tele     @default(JIO)
  status           Status   @default(OPEN)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  assignedToUserId String?  @db.ObjectId
  assignedToUser   User?    @relation(fields: [assignedToUserId], references: [id])
  notes            Notes[]

  @@map("issues")
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

// enum Tele {
//   JIO
//   AIRTEL
//   BSNL
//   QUADRANT
// }

model Notes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String? //optional
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Issue     Issue?   @relation(fields: [issueId], references: [id])
  issueId   String?  @db.ObjectId

  @@map("notes")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  assignedIssues Issue[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
